// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  part: (where?: PartWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  part: (where: PartWhereUniqueInput) => PartPromise;
  parts: (
    args?: {
      where?: PartWhereInput;
      orderBy?: PartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Part>;
  partsConnection: (
    args?: {
      where?: PartWhereInput;
      orderBy?: PartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PartConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPart: (data: PartCreateInput) => PartPromise;
  updatePart: (
    args: { data: PartUpdateInput; where: PartWhereUniqueInput }
  ) => PartPromise;
  updateManyParts: (
    args: { data: PartUpdateManyMutationInput; where?: PartWhereInput }
  ) => BatchPayloadPromise;
  upsertPart: (
    args: {
      where: PartWhereUniqueInput;
      create: PartCreateInput;
      update: PartUpdateInput;
    }
  ) => PartPromise;
  deletePart: (where: PartWhereUniqueInput) => PartPromise;
  deleteManyParts: (where?: PartWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  part: (
    where?: PartSubscriptionWhereInput
  ) => PartSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "partNumber_ASC"
  | "partNumber_DESC"
  | "chineseLong_zh_cn_ASC"
  | "chineseLong_zh_cn_DESC"
  | "chineseShort_zh_cn_ASC"
  | "chineseShort_zh_cn_DESC"
  | "chineseTLong_zh_tw_ASC"
  | "chineseTLong_zh_tw_DESC"
  | "chineseTShort_zh_tw_ASC"
  | "chineseTShort_zh_tw_DESC"
  | "danishLong_da_ASC"
  | "danishLong_da_DESC"
  | "danishShort_da_ASC"
  | "danishShort_da_DESC"
  | "dutchLong_nl_ASC"
  | "dutchLong_nl_DESC"
  | "dutchShort_nl_ASC"
  | "dutchShort_nl_DESC"
  | "englishLong_en_ASC"
  | "englishLong_en_DESC"
  | "englishShort_en_ASC"
  | "englishShort_en_DESC"
  | "frenchLong_fr_ASC"
  | "frenchLong_fr_DESC"
  | "frenchShort_fr_ASC"
  | "frenchShort_fr_DESC"
  | "germanLong_de_ASC"
  | "germanLong_de_DESC"
  | "germanShort_de_ASC"
  | "germanShort_de_DESC"
  | "italianLong_it_ASC"
  | "italianLong_it_DESC"
  | "italianShort_it_ASC"
  | "italianShort_it_DESC"
  | "japaneseLong_ja_ASC"
  | "japaneseLong_ja_DESC"
  | "japaneseShort_ja_ASC"
  | "japaneseShort_ja_DESC"
  | "koreanLong_ko_ASC"
  | "koreanLong_ko_DESC"
  | "koreanShort_ko_ASC"
  | "koreanShort_ko_DESC"
  | "portugeseLong_pt_ASC"
  | "portugeseLong_pt_DESC"
  | "portugeseShort_pt_ASC"
  | "portugeseShort_pt_DESC"
  | "spanishLong_es_ASC"
  | "spanishLong_es_DESC"
  | "spanishShort_es_ASC"
  | "spanishShort_es_DESC";

export type Permission =
  | "ADMIN"
  | "USER"
  | "CREATE"
  | "UPDATE"
  | "DELETE"
  | "EXPORT"
  | "PERMISSIONUPDATE"
  | "CHINESELONG_ZH_CN"
  | "CHINESESHORT_ZH_CN"
  | "CHINESETLONG_ZH_TW"
  | "CHINESETSHORT_ZH_TW"
  | "DANISHLONG_DA"
  | "DANISHSHORT_DA"
  | "DUTCHLONG_NL"
  | "DUTCHSHORT_NL"
  | "ENGLISHLONG_EN"
  | "ENGLISHSHORT_EN"
  | "FRENCHLONG_FR"
  | "FRENCHSHORT_FR"
  | "GERMANLONG_DE"
  | "GERMANSHORT_DE"
  | "ITALIANLONG_IT"
  | "ITALIANSHORT_IT"
  | "JAPANESELONG_JA"
  | "JAPANESESHORT_JA"
  | "KOREANLONG_KO"
  | "KOREANSHORT_KO"
  | "PORTUGESELONG_PT"
  | "PORTUGESESHORT_PT"
  | "SPANISHLONG_ES"
  | "SPANISHSHORT_ES";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export type PartWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserUpdatepermissionsInput;
}

export interface PartUpdateInput {
  partNumber?: String;
  chineseLong_zh_cn?: String;
  chineseShort_zh_cn?: String;
  chineseTLong_zh_tw?: String;
  chineseTShort_zh_tw?: String;
  danishLong_da?: String;
  danishShort_da?: String;
  dutchLong_nl?: String;
  dutchShort_nl?: String;
  englishLong_en?: String;
  englishShort_en?: String;
  frenchLong_fr?: String;
  frenchShort_fr?: String;
  germanLong_de?: String;
  germanShort_de?: String;
  italianLong_it?: String;
  italianShort_it?: String;
  japaneseLong_ja?: String;
  japaneseShort_ja?: String;
  koreanLong_ko?: String;
  koreanShort_ko?: String;
  portugeseLong_pt?: String;
  portugeseShort_pt?: String;
  spanishLong_es?: String;
  spanishShort_es?: String;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserUpdatepermissionsInput;
}

export interface PartSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PartWhereInput;
  AND?: PartSubscriptionWhereInput[] | PartSubscriptionWhereInput;
  OR?: PartSubscriptionWhereInput[] | PartSubscriptionWhereInput;
  NOT?: PartSubscriptionWhereInput[] | PartSubscriptionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PartWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  partNumber?: String;
  partNumber_not?: String;
  partNumber_in?: String[] | String;
  partNumber_not_in?: String[] | String;
  partNumber_lt?: String;
  partNumber_lte?: String;
  partNumber_gt?: String;
  partNumber_gte?: String;
  partNumber_contains?: String;
  partNumber_not_contains?: String;
  partNumber_starts_with?: String;
  partNumber_not_starts_with?: String;
  partNumber_ends_with?: String;
  partNumber_not_ends_with?: String;
  chineseLong_zh_cn?: String;
  chineseLong_zh_cn_not?: String;
  chineseLong_zh_cn_in?: String[] | String;
  chineseLong_zh_cn_not_in?: String[] | String;
  chineseLong_zh_cn_lt?: String;
  chineseLong_zh_cn_lte?: String;
  chineseLong_zh_cn_gt?: String;
  chineseLong_zh_cn_gte?: String;
  chineseLong_zh_cn_contains?: String;
  chineseLong_zh_cn_not_contains?: String;
  chineseLong_zh_cn_starts_with?: String;
  chineseLong_zh_cn_not_starts_with?: String;
  chineseLong_zh_cn_ends_with?: String;
  chineseLong_zh_cn_not_ends_with?: String;
  chineseShort_zh_cn?: String;
  chineseShort_zh_cn_not?: String;
  chineseShort_zh_cn_in?: String[] | String;
  chineseShort_zh_cn_not_in?: String[] | String;
  chineseShort_zh_cn_lt?: String;
  chineseShort_zh_cn_lte?: String;
  chineseShort_zh_cn_gt?: String;
  chineseShort_zh_cn_gte?: String;
  chineseShort_zh_cn_contains?: String;
  chineseShort_zh_cn_not_contains?: String;
  chineseShort_zh_cn_starts_with?: String;
  chineseShort_zh_cn_not_starts_with?: String;
  chineseShort_zh_cn_ends_with?: String;
  chineseShort_zh_cn_not_ends_with?: String;
  chineseTLong_zh_tw?: String;
  chineseTLong_zh_tw_not?: String;
  chineseTLong_zh_tw_in?: String[] | String;
  chineseTLong_zh_tw_not_in?: String[] | String;
  chineseTLong_zh_tw_lt?: String;
  chineseTLong_zh_tw_lte?: String;
  chineseTLong_zh_tw_gt?: String;
  chineseTLong_zh_tw_gte?: String;
  chineseTLong_zh_tw_contains?: String;
  chineseTLong_zh_tw_not_contains?: String;
  chineseTLong_zh_tw_starts_with?: String;
  chineseTLong_zh_tw_not_starts_with?: String;
  chineseTLong_zh_tw_ends_with?: String;
  chineseTLong_zh_tw_not_ends_with?: String;
  chineseTShort_zh_tw?: String;
  chineseTShort_zh_tw_not?: String;
  chineseTShort_zh_tw_in?: String[] | String;
  chineseTShort_zh_tw_not_in?: String[] | String;
  chineseTShort_zh_tw_lt?: String;
  chineseTShort_zh_tw_lte?: String;
  chineseTShort_zh_tw_gt?: String;
  chineseTShort_zh_tw_gte?: String;
  chineseTShort_zh_tw_contains?: String;
  chineseTShort_zh_tw_not_contains?: String;
  chineseTShort_zh_tw_starts_with?: String;
  chineseTShort_zh_tw_not_starts_with?: String;
  chineseTShort_zh_tw_ends_with?: String;
  chineseTShort_zh_tw_not_ends_with?: String;
  danishLong_da?: String;
  danishLong_da_not?: String;
  danishLong_da_in?: String[] | String;
  danishLong_da_not_in?: String[] | String;
  danishLong_da_lt?: String;
  danishLong_da_lte?: String;
  danishLong_da_gt?: String;
  danishLong_da_gte?: String;
  danishLong_da_contains?: String;
  danishLong_da_not_contains?: String;
  danishLong_da_starts_with?: String;
  danishLong_da_not_starts_with?: String;
  danishLong_da_ends_with?: String;
  danishLong_da_not_ends_with?: String;
  danishShort_da?: String;
  danishShort_da_not?: String;
  danishShort_da_in?: String[] | String;
  danishShort_da_not_in?: String[] | String;
  danishShort_da_lt?: String;
  danishShort_da_lte?: String;
  danishShort_da_gt?: String;
  danishShort_da_gte?: String;
  danishShort_da_contains?: String;
  danishShort_da_not_contains?: String;
  danishShort_da_starts_with?: String;
  danishShort_da_not_starts_with?: String;
  danishShort_da_ends_with?: String;
  danishShort_da_not_ends_with?: String;
  dutchLong_nl?: String;
  dutchLong_nl_not?: String;
  dutchLong_nl_in?: String[] | String;
  dutchLong_nl_not_in?: String[] | String;
  dutchLong_nl_lt?: String;
  dutchLong_nl_lte?: String;
  dutchLong_nl_gt?: String;
  dutchLong_nl_gte?: String;
  dutchLong_nl_contains?: String;
  dutchLong_nl_not_contains?: String;
  dutchLong_nl_starts_with?: String;
  dutchLong_nl_not_starts_with?: String;
  dutchLong_nl_ends_with?: String;
  dutchLong_nl_not_ends_with?: String;
  dutchShort_nl?: String;
  dutchShort_nl_not?: String;
  dutchShort_nl_in?: String[] | String;
  dutchShort_nl_not_in?: String[] | String;
  dutchShort_nl_lt?: String;
  dutchShort_nl_lte?: String;
  dutchShort_nl_gt?: String;
  dutchShort_nl_gte?: String;
  dutchShort_nl_contains?: String;
  dutchShort_nl_not_contains?: String;
  dutchShort_nl_starts_with?: String;
  dutchShort_nl_not_starts_with?: String;
  dutchShort_nl_ends_with?: String;
  dutchShort_nl_not_ends_with?: String;
  englishLong_en?: String;
  englishLong_en_not?: String;
  englishLong_en_in?: String[] | String;
  englishLong_en_not_in?: String[] | String;
  englishLong_en_lt?: String;
  englishLong_en_lte?: String;
  englishLong_en_gt?: String;
  englishLong_en_gte?: String;
  englishLong_en_contains?: String;
  englishLong_en_not_contains?: String;
  englishLong_en_starts_with?: String;
  englishLong_en_not_starts_with?: String;
  englishLong_en_ends_with?: String;
  englishLong_en_not_ends_with?: String;
  englishShort_en?: String;
  englishShort_en_not?: String;
  englishShort_en_in?: String[] | String;
  englishShort_en_not_in?: String[] | String;
  englishShort_en_lt?: String;
  englishShort_en_lte?: String;
  englishShort_en_gt?: String;
  englishShort_en_gte?: String;
  englishShort_en_contains?: String;
  englishShort_en_not_contains?: String;
  englishShort_en_starts_with?: String;
  englishShort_en_not_starts_with?: String;
  englishShort_en_ends_with?: String;
  englishShort_en_not_ends_with?: String;
  frenchLong_fr?: String;
  frenchLong_fr_not?: String;
  frenchLong_fr_in?: String[] | String;
  frenchLong_fr_not_in?: String[] | String;
  frenchLong_fr_lt?: String;
  frenchLong_fr_lte?: String;
  frenchLong_fr_gt?: String;
  frenchLong_fr_gte?: String;
  frenchLong_fr_contains?: String;
  frenchLong_fr_not_contains?: String;
  frenchLong_fr_starts_with?: String;
  frenchLong_fr_not_starts_with?: String;
  frenchLong_fr_ends_with?: String;
  frenchLong_fr_not_ends_with?: String;
  frenchShort_fr?: String;
  frenchShort_fr_not?: String;
  frenchShort_fr_in?: String[] | String;
  frenchShort_fr_not_in?: String[] | String;
  frenchShort_fr_lt?: String;
  frenchShort_fr_lte?: String;
  frenchShort_fr_gt?: String;
  frenchShort_fr_gte?: String;
  frenchShort_fr_contains?: String;
  frenchShort_fr_not_contains?: String;
  frenchShort_fr_starts_with?: String;
  frenchShort_fr_not_starts_with?: String;
  frenchShort_fr_ends_with?: String;
  frenchShort_fr_not_ends_with?: String;
  germanLong_de?: String;
  germanLong_de_not?: String;
  germanLong_de_in?: String[] | String;
  germanLong_de_not_in?: String[] | String;
  germanLong_de_lt?: String;
  germanLong_de_lte?: String;
  germanLong_de_gt?: String;
  germanLong_de_gte?: String;
  germanLong_de_contains?: String;
  germanLong_de_not_contains?: String;
  germanLong_de_starts_with?: String;
  germanLong_de_not_starts_with?: String;
  germanLong_de_ends_with?: String;
  germanLong_de_not_ends_with?: String;
  germanShort_de?: String;
  germanShort_de_not?: String;
  germanShort_de_in?: String[] | String;
  germanShort_de_not_in?: String[] | String;
  germanShort_de_lt?: String;
  germanShort_de_lte?: String;
  germanShort_de_gt?: String;
  germanShort_de_gte?: String;
  germanShort_de_contains?: String;
  germanShort_de_not_contains?: String;
  germanShort_de_starts_with?: String;
  germanShort_de_not_starts_with?: String;
  germanShort_de_ends_with?: String;
  germanShort_de_not_ends_with?: String;
  italianLong_it?: String;
  italianLong_it_not?: String;
  italianLong_it_in?: String[] | String;
  italianLong_it_not_in?: String[] | String;
  italianLong_it_lt?: String;
  italianLong_it_lte?: String;
  italianLong_it_gt?: String;
  italianLong_it_gte?: String;
  italianLong_it_contains?: String;
  italianLong_it_not_contains?: String;
  italianLong_it_starts_with?: String;
  italianLong_it_not_starts_with?: String;
  italianLong_it_ends_with?: String;
  italianLong_it_not_ends_with?: String;
  italianShort_it?: String;
  italianShort_it_not?: String;
  italianShort_it_in?: String[] | String;
  italianShort_it_not_in?: String[] | String;
  italianShort_it_lt?: String;
  italianShort_it_lte?: String;
  italianShort_it_gt?: String;
  italianShort_it_gte?: String;
  italianShort_it_contains?: String;
  italianShort_it_not_contains?: String;
  italianShort_it_starts_with?: String;
  italianShort_it_not_starts_with?: String;
  italianShort_it_ends_with?: String;
  italianShort_it_not_ends_with?: String;
  japaneseLong_ja?: String;
  japaneseLong_ja_not?: String;
  japaneseLong_ja_in?: String[] | String;
  japaneseLong_ja_not_in?: String[] | String;
  japaneseLong_ja_lt?: String;
  japaneseLong_ja_lte?: String;
  japaneseLong_ja_gt?: String;
  japaneseLong_ja_gte?: String;
  japaneseLong_ja_contains?: String;
  japaneseLong_ja_not_contains?: String;
  japaneseLong_ja_starts_with?: String;
  japaneseLong_ja_not_starts_with?: String;
  japaneseLong_ja_ends_with?: String;
  japaneseLong_ja_not_ends_with?: String;
  japaneseShort_ja?: String;
  japaneseShort_ja_not?: String;
  japaneseShort_ja_in?: String[] | String;
  japaneseShort_ja_not_in?: String[] | String;
  japaneseShort_ja_lt?: String;
  japaneseShort_ja_lte?: String;
  japaneseShort_ja_gt?: String;
  japaneseShort_ja_gte?: String;
  japaneseShort_ja_contains?: String;
  japaneseShort_ja_not_contains?: String;
  japaneseShort_ja_starts_with?: String;
  japaneseShort_ja_not_starts_with?: String;
  japaneseShort_ja_ends_with?: String;
  japaneseShort_ja_not_ends_with?: String;
  koreanLong_ko?: String;
  koreanLong_ko_not?: String;
  koreanLong_ko_in?: String[] | String;
  koreanLong_ko_not_in?: String[] | String;
  koreanLong_ko_lt?: String;
  koreanLong_ko_lte?: String;
  koreanLong_ko_gt?: String;
  koreanLong_ko_gte?: String;
  koreanLong_ko_contains?: String;
  koreanLong_ko_not_contains?: String;
  koreanLong_ko_starts_with?: String;
  koreanLong_ko_not_starts_with?: String;
  koreanLong_ko_ends_with?: String;
  koreanLong_ko_not_ends_with?: String;
  koreanShort_ko?: String;
  koreanShort_ko_not?: String;
  koreanShort_ko_in?: String[] | String;
  koreanShort_ko_not_in?: String[] | String;
  koreanShort_ko_lt?: String;
  koreanShort_ko_lte?: String;
  koreanShort_ko_gt?: String;
  koreanShort_ko_gte?: String;
  koreanShort_ko_contains?: String;
  koreanShort_ko_not_contains?: String;
  koreanShort_ko_starts_with?: String;
  koreanShort_ko_not_starts_with?: String;
  koreanShort_ko_ends_with?: String;
  koreanShort_ko_not_ends_with?: String;
  portugeseLong_pt?: String;
  portugeseLong_pt_not?: String;
  portugeseLong_pt_in?: String[] | String;
  portugeseLong_pt_not_in?: String[] | String;
  portugeseLong_pt_lt?: String;
  portugeseLong_pt_lte?: String;
  portugeseLong_pt_gt?: String;
  portugeseLong_pt_gte?: String;
  portugeseLong_pt_contains?: String;
  portugeseLong_pt_not_contains?: String;
  portugeseLong_pt_starts_with?: String;
  portugeseLong_pt_not_starts_with?: String;
  portugeseLong_pt_ends_with?: String;
  portugeseLong_pt_not_ends_with?: String;
  portugeseShort_pt?: String;
  portugeseShort_pt_not?: String;
  portugeseShort_pt_in?: String[] | String;
  portugeseShort_pt_not_in?: String[] | String;
  portugeseShort_pt_lt?: String;
  portugeseShort_pt_lte?: String;
  portugeseShort_pt_gt?: String;
  portugeseShort_pt_gte?: String;
  portugeseShort_pt_contains?: String;
  portugeseShort_pt_not_contains?: String;
  portugeseShort_pt_starts_with?: String;
  portugeseShort_pt_not_starts_with?: String;
  portugeseShort_pt_ends_with?: String;
  portugeseShort_pt_not_ends_with?: String;
  spanishLong_es?: String;
  spanishLong_es_not?: String;
  spanishLong_es_in?: String[] | String;
  spanishLong_es_not_in?: String[] | String;
  spanishLong_es_lt?: String;
  spanishLong_es_lte?: String;
  spanishLong_es_gt?: String;
  spanishLong_es_gte?: String;
  spanishLong_es_contains?: String;
  spanishLong_es_not_contains?: String;
  spanishLong_es_starts_with?: String;
  spanishLong_es_not_starts_with?: String;
  spanishLong_es_ends_with?: String;
  spanishLong_es_not_ends_with?: String;
  spanishShort_es?: String;
  spanishShort_es_not?: String;
  spanishShort_es_in?: String[] | String;
  spanishShort_es_not_in?: String[] | String;
  spanishShort_es_lt?: String;
  spanishShort_es_lte?: String;
  spanishShort_es_gt?: String;
  spanishShort_es_gte?: String;
  spanishShort_es_contains?: String;
  spanishShort_es_not_contains?: String;
  spanishShort_es_starts_with?: String;
  spanishShort_es_not_starts_with?: String;
  spanishShort_es_ends_with?: String;
  spanishShort_es_not_ends_with?: String;
  AND?: PartWhereInput[] | PartWhereInput;
  OR?: PartWhereInput[] | PartWhereInput;
  NOT?: PartWhereInput[] | PartWhereInput;
}

export interface PartCreateInput {
  partNumber: String;
  chineseLong_zh_cn?: String;
  chineseShort_zh_cn?: String;
  chineseTLong_zh_tw?: String;
  chineseTShort_zh_tw?: String;
  danishLong_da?: String;
  danishShort_da?: String;
  dutchLong_nl?: String;
  dutchShort_nl?: String;
  englishLong_en?: String;
  englishShort_en?: String;
  frenchLong_fr?: String;
  frenchShort_fr?: String;
  germanLong_de?: String;
  germanShort_de?: String;
  italianLong_it?: String;
  italianShort_it?: String;
  japaneseLong_ja?: String;
  japaneseShort_ja?: String;
  koreanLong_ko?: String;
  koreanShort_ko?: String;
  portugeseLong_pt?: String;
  portugeseShort_pt?: String;
  spanishLong_es?: String;
  spanishShort_es?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface PartUpdateManyMutationInput {
  partNumber?: String;
  chineseLong_zh_cn?: String;
  chineseShort_zh_cn?: String;
  chineseTLong_zh_tw?: String;
  chineseTShort_zh_tw?: String;
  danishLong_da?: String;
  danishShort_da?: String;
  dutchLong_nl?: String;
  dutchShort_nl?: String;
  englishLong_en?: String;
  englishShort_en?: String;
  frenchLong_fr?: String;
  frenchShort_fr?: String;
  germanLong_de?: String;
  germanShort_de?: String;
  italianLong_it?: String;
  italianShort_it?: String;
  japaneseLong_ja?: String;
  japaneseShort_ja?: String;
  koreanLong_ko?: String;
  koreanShort_ko?: String;
  portugeseLong_pt?: String;
  portugeseShort_pt?: String;
  spanishLong_es?: String;
  spanishShort_es?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserCreatepermissionsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface PartConnection {
  pageInfo: PageInfo;
  edges: PartEdge[];
}

export interface PartConnectionPromise
  extends Promise<PartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartEdge>>() => T;
  aggregate: <T = AggregatePartPromise>() => T;
}

export interface PartConnectionSubscription
  extends Promise<AsyncIterator<PartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PartSubscriptionPayload {
  mutation: MutationType;
  node: Part;
  updatedFields: String[];
  previousValues: PartPreviousValues;
}

export interface PartSubscriptionPayloadPromise
  extends Promise<PartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartPreviousValuesPromise>() => T;
}

export interface PartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartPreviousValuesSubscription>() => T;
}

export interface AggregatePart {
  count: Int;
}

export interface AggregatePartPromise
  extends Promise<AggregatePart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartSubscription
  extends Promise<AsyncIterator<AggregatePart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  partNumber: String;
  chineseLong_zh_cn?: String;
  chineseShort_zh_cn?: String;
  chineseTLong_zh_tw?: String;
  chineseTShort_zh_tw?: String;
  danishLong_da?: String;
  danishShort_da?: String;
  dutchLong_nl?: String;
  dutchShort_nl?: String;
  englishLong_en?: String;
  englishShort_en?: String;
  frenchLong_fr?: String;
  frenchShort_fr?: String;
  germanLong_de?: String;
  germanShort_de?: String;
  italianLong_it?: String;
  italianShort_it?: String;
  japaneseLong_ja?: String;
  japaneseShort_ja?: String;
  koreanLong_ko?: String;
  koreanShort_ko?: String;
  portugeseLong_pt?: String;
  portugeseShort_pt?: String;
  spanishLong_es?: String;
  spanishShort_es?: String;
}

export interface PartPreviousValuesPromise
  extends Promise<PartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  partNumber: () => Promise<String>;
  chineseLong_zh_cn: () => Promise<String>;
  chineseShort_zh_cn: () => Promise<String>;
  chineseTLong_zh_tw: () => Promise<String>;
  chineseTShort_zh_tw: () => Promise<String>;
  danishLong_da: () => Promise<String>;
  danishShort_da: () => Promise<String>;
  dutchLong_nl: () => Promise<String>;
  dutchShort_nl: () => Promise<String>;
  englishLong_en: () => Promise<String>;
  englishShort_en: () => Promise<String>;
  frenchLong_fr: () => Promise<String>;
  frenchShort_fr: () => Promise<String>;
  germanLong_de: () => Promise<String>;
  germanShort_de: () => Promise<String>;
  italianLong_it: () => Promise<String>;
  italianShort_it: () => Promise<String>;
  japaneseLong_ja: () => Promise<String>;
  japaneseShort_ja: () => Promise<String>;
  koreanLong_ko: () => Promise<String>;
  koreanShort_ko: () => Promise<String>;
  portugeseLong_pt: () => Promise<String>;
  portugeseShort_pt: () => Promise<String>;
  spanishLong_es: () => Promise<String>;
  spanishShort_es: () => Promise<String>;
}

export interface PartPreviousValuesSubscription
  extends Promise<AsyncIterator<PartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  partNumber: () => Promise<AsyncIterator<String>>;
  chineseLong_zh_cn: () => Promise<AsyncIterator<String>>;
  chineseShort_zh_cn: () => Promise<AsyncIterator<String>>;
  chineseTLong_zh_tw: () => Promise<AsyncIterator<String>>;
  chineseTShort_zh_tw: () => Promise<AsyncIterator<String>>;
  danishLong_da: () => Promise<AsyncIterator<String>>;
  danishShort_da: () => Promise<AsyncIterator<String>>;
  dutchLong_nl: () => Promise<AsyncIterator<String>>;
  dutchShort_nl: () => Promise<AsyncIterator<String>>;
  englishLong_en: () => Promise<AsyncIterator<String>>;
  englishShort_en: () => Promise<AsyncIterator<String>>;
  frenchLong_fr: () => Promise<AsyncIterator<String>>;
  frenchShort_fr: () => Promise<AsyncIterator<String>>;
  germanLong_de: () => Promise<AsyncIterator<String>>;
  germanShort_de: () => Promise<AsyncIterator<String>>;
  italianLong_it: () => Promise<AsyncIterator<String>>;
  italianShort_it: () => Promise<AsyncIterator<String>>;
  japaneseLong_ja: () => Promise<AsyncIterator<String>>;
  japaneseShort_ja: () => Promise<AsyncIterator<String>>;
  koreanLong_ko: () => Promise<AsyncIterator<String>>;
  koreanShort_ko: () => Promise<AsyncIterator<String>>;
  portugeseLong_pt: () => Promise<AsyncIterator<String>>;
  portugeseShort_pt: () => Promise<AsyncIterator<String>>;
  spanishLong_es: () => Promise<AsyncIterator<String>>;
  spanishShort_es: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Part {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  partNumber: String;
  chineseLong_zh_cn?: String;
  chineseShort_zh_cn?: String;
  chineseTLong_zh_tw?: String;
  chineseTShort_zh_tw?: String;
  danishLong_da?: String;
  danishShort_da?: String;
  dutchLong_nl?: String;
  dutchShort_nl?: String;
  englishLong_en?: String;
  englishShort_en?: String;
  frenchLong_fr?: String;
  frenchShort_fr?: String;
  germanLong_de?: String;
  germanShort_de?: String;
  italianLong_it?: String;
  italianShort_it?: String;
  japaneseLong_ja?: String;
  japaneseShort_ja?: String;
  koreanLong_ko?: String;
  koreanShort_ko?: String;
  portugeseLong_pt?: String;
  portugeseShort_pt?: String;
  spanishLong_es?: String;
  spanishShort_es?: String;
}

export interface PartPromise extends Promise<Part>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  partNumber: () => Promise<String>;
  chineseLong_zh_cn: () => Promise<String>;
  chineseShort_zh_cn: () => Promise<String>;
  chineseTLong_zh_tw: () => Promise<String>;
  chineseTShort_zh_tw: () => Promise<String>;
  danishLong_da: () => Promise<String>;
  danishShort_da: () => Promise<String>;
  dutchLong_nl: () => Promise<String>;
  dutchShort_nl: () => Promise<String>;
  englishLong_en: () => Promise<String>;
  englishShort_en: () => Promise<String>;
  frenchLong_fr: () => Promise<String>;
  frenchShort_fr: () => Promise<String>;
  germanLong_de: () => Promise<String>;
  germanShort_de: () => Promise<String>;
  italianLong_it: () => Promise<String>;
  italianShort_it: () => Promise<String>;
  japaneseLong_ja: () => Promise<String>;
  japaneseShort_ja: () => Promise<String>;
  koreanLong_ko: () => Promise<String>;
  koreanShort_ko: () => Promise<String>;
  portugeseLong_pt: () => Promise<String>;
  portugeseShort_pt: () => Promise<String>;
  spanishLong_es: () => Promise<String>;
  spanishShort_es: () => Promise<String>;
}

export interface PartSubscription
  extends Promise<AsyncIterator<Part>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  partNumber: () => Promise<AsyncIterator<String>>;
  chineseLong_zh_cn: () => Promise<AsyncIterator<String>>;
  chineseShort_zh_cn: () => Promise<AsyncIterator<String>>;
  chineseTLong_zh_tw: () => Promise<AsyncIterator<String>>;
  chineseTShort_zh_tw: () => Promise<AsyncIterator<String>>;
  danishLong_da: () => Promise<AsyncIterator<String>>;
  danishShort_da: () => Promise<AsyncIterator<String>>;
  dutchLong_nl: () => Promise<AsyncIterator<String>>;
  dutchShort_nl: () => Promise<AsyncIterator<String>>;
  englishLong_en: () => Promise<AsyncIterator<String>>;
  englishShort_en: () => Promise<AsyncIterator<String>>;
  frenchLong_fr: () => Promise<AsyncIterator<String>>;
  frenchShort_fr: () => Promise<AsyncIterator<String>>;
  germanLong_de: () => Promise<AsyncIterator<String>>;
  germanShort_de: () => Promise<AsyncIterator<String>>;
  italianLong_it: () => Promise<AsyncIterator<String>>;
  italianShort_it: () => Promise<AsyncIterator<String>>;
  japaneseLong_ja: () => Promise<AsyncIterator<String>>;
  japaneseShort_ja: () => Promise<AsyncIterator<String>>;
  koreanLong_ko: () => Promise<AsyncIterator<String>>;
  koreanShort_ko: () => Promise<AsyncIterator<String>>;
  portugeseLong_pt: () => Promise<AsyncIterator<String>>;
  portugeseShort_pt: () => Promise<AsyncIterator<String>>;
  spanishLong_es: () => Promise<AsyncIterator<String>>;
  spanishShort_es: () => Promise<AsyncIterator<String>>;
}

export interface PartEdge {
  node: Part;
  cursor: String;
}

export interface PartEdgePromise extends Promise<PartEdge>, Fragmentable {
  node: <T = PartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartEdgeSubscription
  extends Promise<AsyncIterator<PartEdge>>,
    Fragmentable {
  node: <T = PartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface User {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Part",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
